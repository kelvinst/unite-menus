*unite-menus.txt*   Plugin to help with defining menus and keymappings on unite

Author:   Kelvin Stinghen <http://kelvinst.github.io>

|unite-menus-introduction|      Introduction
|unite-menus-variables|         Variables
|unite-menus-functions|         Functions

INTRODUCTION                            *unite-menus-introduction* *unite-menus*

If you like the menus functionality of unite, but you find it a little
reapeating to define the commands, the keymap for them and linking everything,
this plugin is for you!

The main function is the |unite_menus#Define|. Keep scrolling to find its
documentation.

VARIABLES                                                *unite-menus-variables*

                                                          *g:unite_menus_keymap*
g:unite_menus_keymap      This is the default keymap of unite menus. If you type
                          it no normal mode, it will open a list of all the
                          menus you have defined using this plugin. This
                          variable is also used to create |relative_keymap| on
                          menus.

                          A good idea is to map it to something easy like:
>
        let g:unite_menus_keymap = '<Leader><Leader>'
<

                          Default value:

>
        let g:unite_menus_keymap = '<Leader>/'
<

                                                *g:unite_menus_keymap_arguments*
g:unite_menus_keymap_arguments  This is the default arguments sent to keymap,
                                for more details about what kind of arguments we
                                are talking about, type >:h map-arguments< and
                                you will be on its documentation

                                Default value:

>
        let g:unite_menus_keymap_arguments = ''
<

FUNCTIONS                                                *unite-menus-functions*

                                                            *unite_menus#Define*
unite_menus#Define        This method will define a brand new unite menu,
                          following some conventions of style. The signature
                          is the following:

>
        " if you want to copy this to your .vimrc, just remove the lines with
        " double slashes and double quotes and it might work
        call unite_menus#Define({
              \   'shortcuts': {
              \\    " That's the name we gave to the menu
              \     'description': 'Shortcuts',
              \\    " This will create two global shortcuts for this menu
              \     'keymap': ['s', '<Leader>s'],
              \\    " The list of items of your menu
              \     'candidates': {
              \\      " This will be used as the description of the item
              \       'Edit .gitconfig': {
              \\        " The command to be executed when you select this item
              \         'command': 'vsplit ~/.gitconfig',
              \       },
              \       'Edit .vimrc': {
              \\        " This will create a global shortcut for this menu item
              \         'keymap': '<Leader>ve',
              \         'command': 'vsplit $MYVIMRC',
              \\        " This defines which kind of action will be executed
              \\        " when you select this menu, defaults to 'command', to
              \\        " more information about these kinds, just do a
              \\        " ':h unite-kinds' to go to its documentation.
              \\        "
              \\        " PS.: This plugin adds a new kind 'command_completion',
              \\        " which is exactly the same of 'command', but with the
              \\        " default action poiting to 'edit' action, not 'open'
              \         'kind': 'command_completion',
              \       },
              \       'Edit .zshrc': {
              \\        " This will create two relative shortcuts for this menu
              \\        " item (so, to open it, you can type any of thess key
              \\        " combinations: zs, zse, <Leader>sz or <Leader>sze)
              \         'relative_keymap': ['z', 'ze'],
              \         'command': 'vsplit ~/.zshrc',
              \       },
              \       'Reload .vimrc': {
              \         'keymap': '<Leader>vr',
              \\        " As you can se here, you can combine global and
              \\        " relative keymaps in the same menu item
              \         'relative_keymap': 'vr',
              \         'command': 'so $MYVIMRC',
              \         'kind': 'command',
              \       },
              \     },
              \   },
              \\  " as you can see, you can create more than one menu by call
              \   'rails': {
              \\    " That's the name we gave to the other menu
              \     'description': 'Rails',
              \\    " You can use relative keymappings for menus too, see
              \\    " |g:unite_menus_keymap| variable to know from what this is
              \\    " relative
              \     'relative_keymap': ['r', 'R'],
              \   },
              \   'rails_utils' {
              \\    " This can be used to define this as a submenu of another
              \\    " menu, but the parent menu must be defined first, please.
              \\    " With this configured, this menu will appear as a child of
              \\    " the 'rails' menu and not on the main menu list, the
              \\    " relative keymapping will be relative to its parent menu too
              \     'parent_menu': 'rails',
              \     'description': 'Rails Utils',
              \   },
              \ })
<

